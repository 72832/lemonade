#pragma config(Sensor, in1,    rightpotentiometer, sensorPotentiometer)
#pragma config(Sensor, in2,    leftpotentiometer, sensorPotentiometer)
#pragma config(Sensor, dgtl1,  rightencoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftencoder,    sensorQuadEncoder)
#pragma config(Motor,  port1,           rightfrontdrive, tmotorVex393HighSpeed_HBridge, openLoop)
#pragma config(Motor,  port2,           rightbackdrive, tmotorVex393HighSpeed_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           rightlift,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           flipper,       tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port5,           claw,          tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port8,           leftlift,      tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           leftbackdrive, tmotorVex393HighSpeed_MC29, openLoop)
#pragma config(Motor,  port10,          leftfrontdrive, tmotorVex393HighSpeed_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(15)
#pragma userControlDuration(105)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

//State all functions

//Drive Function
void drive(){
	motor[rightfrontdrive]= vexRT[Ch2];
	motor[rightbackdrive]= vexRT[Ch2];
	motor[leftbackdrive]= vexRT[Ch3];
	motor[leftfrontdrive]= vexRT[Ch3];
}

//Lift Functions
void liftUp(){
	motor[leftlift] = -127;
	motor[rightlift] = -127;
}
void liftDown(){
	motor[leftlift] = 127;
	motor[rightlift] = 127;
}
void liftStay(){
	motor[leftlift] = 0;
	motor[rightlift] = 0;
}

//Flipper Functions
void flipperUp(){
	motor[flipper] = 127;
}

void flipperDown(){
	motor[flipper] = (-127/2);
}

void flipperStay(){
	motor[flipper] = 0;
}

//Claw Functions
void clawOpen(){
	motor[claw] = (127/4);
}

void clawClose(){
	motor[claw] = (-127/2);
}

void clawStay(){
	motor[claw] = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
//
//
// Pre-Autonomous Functions
//
// You may want to perform some actions before the computer starts. Do them in the
// following function.rr
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
	// Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
	// Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
	bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// The "Driver Skills" competition has no autonomous phase. Simply leave the following
// placeholder.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous(){

	//BluePostAuton
	while(SensorValue[rightencoder] > 1800) //Foward for 5 full rotations
	{
		if(SensorValue[leftencoder] < SensorValue[rightencoder])
		{ //If the left side has moved foward more than the right...
			motor[port3] = 50; //slow down the left...
			motor[port2] = 63; //and speed up the right
		}
		if(SensorValue[leftencoder] > SensorValue[rightencoder])
		{ //If the right side has moved foward more than the left...
			motor[port3] = 63; //speed up the left...
			motor[port2] = 50; //and slow down the right...
		}
		if(SensorValue[leftencoder] == SensorValue[rightencoder])
		{ //If the left and right have moved foward the same amount...
			motor[port3] = (127/2); //run the motors at the same speed
			motor[port2] = (127/2);
		}
	}
}
/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol(){

	// User control code here, inside the loop

	while (true){
		//Drive Program
		drive();

		//Lift Program
		if (vexRT[Btn6U]==1){
			liftUp();
			} else if (vexRT[Btn6D]==1){
			liftDown();
			} else {
			liftStay();
		}

		//Flipper Program
		if (vexRT[Btn5U]==1){
			flipperUp();
			} else if(vexRT[Btn5D]==1){
			flipperDown();
			} else{
			flipperStay();
		}

		//Claw Program
		if (vexRT[Btn8R]==1){
			clawOpen();
			} else if(vexRT[Btn8L]==1){
			clawClose();
			} else{
			clawStay();
		}
	}
}ll
